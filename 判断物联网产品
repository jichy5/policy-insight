import os
import time
import json
import random
from http import HTTPStatus
import dashscope
from dashscope import Generation
from dashscope.api_entities.dashscope_response import Role
from http import HTTPStatus
import dashscope
import time
%matplotlib inline
import pandas as pd
from bs4 import BeautifulSoup
import webbrowser
import requests
import warnings
import re
import pandas as pd
import matplotlib
import numpy as np
import matplotlib.pyplot as plt
import jieba as jb
import re
from collections import Counter
# from wordcloud import WordCloud
# from sklearn.feature_extraction.text import TfidfVectorizer
# from sklearn.model_selection import train_test_split
# from sklearn.feature_extraction.text import CountVectorizer
# from sklearn.feature_extraction.text import TfidfTransformer
# from sklearn.naive_bayes import MultinomialNB
# from pylab import mpl
# Author: benjaminYang
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import time
import json
# 设置显示中文字体
mpl.rcParams["font.sans-serif"] = ["SimHei"]
warnings.filterwarnings('ignore')  # 忽略所有警告
# from sparkai.llm.llm import ChatSparkLLM, ChunkPrintHandler
# from sparkai.core.messages import ChatMessage

# #星火认知大模型Spark3.5 Max的URL值，其他版本大模型URL值请前往文档（https://www.xfyun.cn/doc/spark/Web.html）查看
# SPARKAI_URL = 'wss://spark-api.xf-yun.com/v1.1/chat'
# #星火认知大模型调用秘钥信息，请前往讯飞开放平台控制台（https://console.xfyun.cn/services/bm35）查看
# SPARKAI_APP_ID = '35fc86b8'
# SPARKAI_API_SECRET = 'MWFlOTc5ZmU4MjE0N2ZmYjljZTQyYzll'
# SPARKAI_API_KEY = 'f01968d05750b6f68082f14e600bd4c4'
# #星火认知大模型Spark3.5 Max的domain值，其他版本大模型domain值请前往文档（https://www.xfyun.cn/doc/spark/Web.html）查看
# SPARKAI_DOMAIN = 'general'
#请自行填写
dashscope.api_key = ''
excel_file = "D:/实习/测试结果/524政策洞察/产品.xlsx"
df = pd.read_excel(excel_file)
###### 

input_system='''
# 角色
你是一个有着丰富知识库的物联网行业分析师。你的主要技能是鉴别一个产品是否与物联网行业相关。

## 技能
### 技能1: 识别物联网行业相关产品
- 判断用户提供的产品是否与物联网行业相关。
- 如果相关，回答“是”，并给出不超过50字的解释。
- 如果不相关，回答“不是”。

## 限制
- 只能讨论用户提供的产品，不对非物联网行业的产品进行识别和评价。
- 回答和解释不超过50字。
- 判断和解释依据你的知识库和网上进行的搜索。
- 使用用户使用的语言进行回答。
'''
# 读取Excel文件
start_time = time.time()

df_result = pd.DataFrame(columns=['text','count', 'explain'])
for index,(result,numb) in enumerate(zip(df['text'], df['count'])):  
    flag1= 0
    # 执行一些操作，直到至少过去了10秒
    
    # 使用Beautiful Soup解析HTML内容
    
    try:
        
#         content = result
# #             content = result
# #             input_text =  ' 给' + content + '选择' + classify_title + '里面规定的主题，如果有对应的主题则输出主题名称（注意只能输出一个主题名称），如果没有对应的主题，则输出无对应主题（这里得从这个政策完全看粗这个标题才输出对应主题） '

#         messages = [ChatMessage(
#                     role="role",
#                     content=input_system
#                 ),ChatMessage(
#                     role="user",
#                     content=content
#                 )]
#             #     messages = {
#             #                 "text": [{"role":"system","content":"你现在扮演李白，你豪情万丈，狂放不羁；接下来请用李白的口吻和用户对话。"},
#             #                         {"role": "user", "content": '你好'}]}
#         handler = ChunkPrintHandler()
#         a = spark.generate([messages])
#         conclude = a.generations[0][0].message.content
#         print(conclude)
        content = result
        messages = [{'role': 'system', 'content': input_system},
            {'role': 'user', 'content': '这是一个产品: \n ' + content}]
        while(flag1 == 0):
            response = Generation.call(
                'qwen1.5-32b-chat',
                messages=messages,
                temperature = 0.5,
                # set the random seed, optional, default to 1234 if not set
                seed=random.randint(1, 10000),
                result_format='message',  # set the result to be "message"  format.
#                     enable_search = True,

            )
            if response.status_code == HTTPStatus.OK:
                conclude = response.output.choices[0]['message']['content']
                messages.append({'role': response.output.choices[0]['message']['role'],
                                 'content': response.output.choices[0]['message']['content']})
                flag1 = 1 
            else:
                print('Request id: %s, Status code: %s, error code: %s, error message: %s' % (
                    response.request_id, response.status_code,
                    response.code, response.message
                ))
                if response.status_code == 400:
                    raise ValueError("这是一个故意的错误")
                else:
                    time.sleep(30)
            print(conclude)
        df_result = df_result.append({'text': result,'count': numb,'determine': conclude}, ignore_index=True)
            
            
        print('\n')
        print(f'当前行: {index + 1}')

        
    except Exception as e:
        print(e)
        conclude = '文本错误'
        df_result = df_result.append({'text': result,'count': numb,'determine': '有错误'},
                                     ignore_index=True)


    
    



    print('\n')
#     print(f'内容:{result}')
    if (index + 1) % 100 == 0:
        df_result.to_excel('D:/实习/测试结果/524政策洞察/5.28产品词语判断.xlsx')
        print(f'当前行: {index + 1}')

end_time = time.time()
execution_time = end_time - start_time
print("代码执行时间:", execution_time, "秒")
# df_result.to_excel('D:/实习/测试结果/524政策洞察/5.28产品词语判断.xlsx')

