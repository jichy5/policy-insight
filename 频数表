##如果想统计政策出现的频数，这里利用的表格是判断政策的关系后的国家级表和省市级表的结合
excel_path = 'D:/实习/测试结果/524政策洞察/5.24 独立与否.xlsx'
df = pd.read_excel(excel_path)

# 定义一个函数来从字符串中提取单引号内的所有内容
def extract_text_within_single_quotes(text):
    return re.findall("'(.*?)'", text)

# 应用该函数，创建一个新的列来存储提取出来的文本
df['extracted'] = df['国家级政策具体政策'].apply(extract_text_within_single_quotes)
print(df['extracted'])
df['extracted_combined'] = df['extracted'].apply(lambda x: ' '.join(x))  # 合并提取出来的文字为一个字符串
print(df['extracted_combined'])

# 将所有提取的文字连接成一个列表
all_extracted_texts = [item for sublist in df['extracted'] for item in sublist]

# 创建一个新DataFrame来统计每个文字的出现次数
occurrences = pd.Series(all_extracted_texts).value_counts().reset_index()
occurrences.columns = ['extracted_text', 'count']

# 打印结果
print(occurrences)



##该政策表为 policy analysis2 中生成的表
excel_path = 'D:/实习/测试结果/工作流/政策表1.xlsx'
df_left = pd.read_excel(excel_path)


## 可以提取某一列的频数 将'已有产品'替换即可
df = df_left

def replace_characters(parts):
    replaced_parts = []
    for part in parts:
        # 检查 '业' 是否在最后一个字符
        if part.endswith('业'):
            part = part[:-1]  # 去掉最后一个 '业'
        # 替换其他字符
        part = part.replace('如', '').replace('（', '').replace('）', '').strip()
        replaced_parts.append(part)
    return replaced_parts

# 示例数据
# 调用函数

# 定义一个函数来提取以逗号分隔的所有文字
def extract_all_texts(text):
    # 替换所有分隔符为英文逗号
    text = text.replace('，', ',').replace('、', ',')
    # 按英文逗号分割字符串
    parts = text.split(',')
    # 去除两边的空白字符
    result = replace_characters(parts)

    return result

# 提取所有以逗号分隔的文字
df['extracted_texts'] = df['已有产品'].apply(extract_all_texts)

# 将所有提取的文本展开到一个Series
all_texts_series = df['extracted_texts'].explode()

# 计算每个唯一文本出现的次数
text_counts = all_texts_series.value_counts()

# 创建新的DataFrame
result_df = pd.DataFrame({
    'text': text_counts.index,
    'count': text_counts.values
})

# 打印新的DataFrame
print(result_df)


### 这个是已经提取了一个频数，然后想看这个市场对应的所有产品
import pandas as pd

# 创建第一个示例 DataFrame
df1 = df_left

# 创建第二个示例 DataFrame
excel_path = 'D:/实习/测试结果/524政策洞察/市场.xlsx'
df2 = pd.read_excel(excel_path)

# 定义一个函数来检查 df2 中的元素是否被包含在 df1 中的某列元素中，并返回包含的另一列元素的合集
def get_matching_elements(row, df1):
    matches = df1[df1['潜在市场'].str.contains(row, na=False, regex=False)]
    return '\n'.join(matches['已有产品'].tolist())

# 创建新 DataFrame
result_df = df2.copy()
result_df['matched_content'] = df2['text'].apply(lambda x: get_matching_elements(x, df1))

# 打印结果
print(result_df)
