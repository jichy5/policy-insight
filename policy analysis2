
import time
import random
from dashscope import Generation
from dashscope.api_entities.dashscope_response import Role
from http import HTTPStatus
import dashscope
import warnings
import pandas as pd


# 设置显示中文字体
mpl.rcParams["font.sans-serif"] = ["SimHei"]
warnings.filterwarnings('ignore')  # 忽略所有警告

##请自己输入
dashscope.api_key = ' '

input_system = '''
# 角色
你是一位善于洞察并且思维敏捷的文件概述专家。你的特长在于从沉重而庞大的文件中提取出核心信息，对其进行整理，然后以简洁、有趣且深入的方式对其进行概述。

## 技能
### 技能 1：文件分类及标签贴定
- 仔细阅读提供的文件，根据文件内容为其添加适当的标签，这些标签可以是专业术语、学术领域或研究主题。其格式如下：
=====
标签： <xxx>
=====

### 技能 2：文件概述
- 制作一份不超过100字的概述，概述文件的主题和主要观点。其格式如下：
=====
概述本文：<xxx>
=====


### 技能 3：商机分析
- 探查潜在的目标市场，对现有的商业模式和产品进行深度分析。如果有可能，结合你的知识资源，为用户提供一个基于市场动态的视角。其格式如下：
=====
目标行业：<xxx> <xxx>
潜在市场： <xxx> <xxx>
现有商业模式： <xxx> <xxx>
现有产品： <xxx>
=====
输出：
遵照技能的输出规则。如果有政策，输出具体的政策并用书名号括起来。在输出行业情况、经营/利润模式、潜在市场、现有商业模式和现有产品时，你需要加上你的见解。

## 限制：
- 目标行业,潜在市场，现有商业模式，现有产品的输出格式为：（xxx）、（xxx）
- 你只能讨论与文件概述相关的话题。
- 你必须遵循给定的输出格式。
- 标签不得超过10个字。
- 你应将产品理解为特定的物品或服务，而不是地点或设置（例如，不要将华为的AI计算中心看作产品）。
- 当你提到的市场、模式或产品来自给定的文档时，尽量详细地指出实施方的区域和公司名称。
- 如果涉及到绿色低碳的内容，尽量详细地进行描述。'''


def extract_back(s, char):
    # 查找字符char在字符串s中的索引
    index = s.find(char)

    # 如果字符存在，提取后半部分
    if index != -1:
        return s[index + len(char):]
    else:
        # 如果字符不存在，输出整个字符串
        return s


def extract_before(s, substr):
    # 查找子字符串substr在字符串s中的索引
    index = s.find(substr)

    # 如果子字符串存在，提取前半部分
    if index != -1:
        return s[:index]
    else:
        # 如果子字符串不存在，输出整个字符串
        return s


excel_file = "D:/实习/测试结果/副本节能带内容.xlsx"
df = pd.read_excel(excel_file)
df = df.iloc[200:]

######
# 读取Excel文件
start_time = time.time()

df_result = pd.DataFrame(columns=['上传时间', '链接', '标题', '公众号', '内容', '总结'])

for index, (puttime, html_content, title, numb, result) in enumerate(
        zip(df['上传时间'], df['链接'], df['标题'], df['公众号'], df['内容'])):
    flag1 = 0
    # 执行一些操作，直到至少过去了10秒

    # 使用Beautiful Soup解析HTML内容

    try:

        content = result

        #             content = result
        #             input_text =  ' 给' + content + '选择' + classify_title + '里面规定的主题，如果有对应的主题则输出主题名称（注意只能输出一个主题名称），如果没有对应的主题，则输出无对应主题（这里得从这个政策完全看粗这个标题才输出对应主题） '

        messages = [{'role': 'system', 'content': input_system},
                    {'role': 'user', 'content': '这是一篇微信公众号文章: \n ' + content}]
        while (flag1 == 0):
            response = Generation.call(
                'qwen1.5-32b-chat',
                messages=messages,
                temperature=0.5,
                # set the random seed, optional, default to 1234 if not set
                seed=random.randint(1, 10000),
                result_format='message',  # set the result to be "message"  format.
                #                     enable_search = True,

            )
            if response.status_code == HTTPStatus.OK:
                conclude = response.output.choices[0]['message']['content']
                messages.append({'role': response.output.choices[0]['message']['role'],
                                 'content': response.output.choices[0]['message']['content']})
                flag1 = 1
            else:
                print('Request id: %s, Status code: %s, error code: %s, error message: %s' % (
                    response.request_id, response.status_code,
                    response.code, response.message
                ))
                if response.status_code == 400:
                    raise ValueError("这是一个故意的错误")
                else:
                    time.sleep(30)
            print(conclude)
            df_result = df_result.append({'上传时间': puttime, '链接': html_content, '标题': title,
                                          '公众号': numb, '内容': result, '总结': conclude
                                          }, ignore_index=True)

            print('\n')
            print(f'当前行: {index + 1}')


    except Exception as e:
        print(e)
        conclude = '文本错误'
        df_result = df_result.append({'上传时间': puttime, '链接': html_content,
                                      '标题': title, '公众号': numb, '内容': content,
                                      '总结': '提取错误,可能有敏感词'
                                      },
                                     ignore_index=True)

    print('\n')
    #     print(f'内容:{result}')
    if (index + 1) % 100 == 0:
        df_result.to_excel('D:/实习/测试结果/深度洞察.xlsx')
        print(f'当前行: {index + 1}')

df_result['读取长度'] = df_result['内容'].str.len()
end_time = time.time()
execution_time = end_time - start_time
print("代码执行时间:", execution_time, "秒")

df_result.to_excel('D:/实习/测试结果/深度洞察.xlsx')
